const db = require("./models"); //import the model from the models folder
const UserModel = db.model; //stating that the UserModel is the short hand for the database object model


exports.create = (req, res) => { //this is the function for creating a database object
    // Validate request
    if (!req.body.Description) { //this is a validation check, to ensure that the body has a description... this could be expanded for every expected value in the schema 
      res.status(400).send({ message: "Content can not be empty!" }); //stating that it will raise an error of type 400
      return; //ends the function so the code does not continue 
    }
  
    // Create a model
    const usermodel = new UserModel({ //creating a model from the defined usermodel in the model.js file.  
      Name: req.body.Name, //specifying that the request body value of name is the name value in the schema 
      Description: req.body.Description,//specifying that the request body value of Description is the Description value in the schema 
      Date: req.body.Date //specifying that the request body value of Date is the Date value in the schema 
    });
  
  
    usermodel //this variable defined in the user module also acts as the main entry point for any further interactions
      .save(usermodel) //this save command is what saves the usermodel to the database
      .then(data => { //once save has executed, THEN we want to inform the client that made the request about the success
        res.send(data);//sends the data generated by saving the model to the client that made the request 
      })
      .catch(err => { //if there was a error it will be caught by this function
        res.status(500).send({ //sends an error of type 500 to the client with a message about the issue 
          message:
            err.message || "error occurred while creating the object."
        });
      });
  };




  exports.findAll = (req, res) => {//the function for getting all records back from the database 

    UserModel.find() //using the UserModel we are calling the .find() function, and this finds all records
      .then(data => { //once FIND has finished executing, THEN we want to inform the client that made the request about the success and send the data
        res.send(data);
      })
      .catch(err => {//if there was a error it will be caught by this function
        res.status(500).send({//sends an error of type 500 to the client with a message about the issue 
          message:
            err.message || "error occurred while retrieving."
        });
      });
  };



exports.delete = (req, res) => //the function to delete a record
{
  UserModel.deleteOne({ _id: req.params.id }) //using the UserModel we call the .deleteOne function, this deletes a specified record based on the criteria defined in the paramaters
  //in this function we are deleting a record by the _id of the document. We get the ID from the requests url paramaters. 
  .then(data => {//once the delete has executed THEN we do this

    if(data.deletedCount <= 0) //check how many records were deleted, if less than or equal to 0 
    {
      res.status(400).send({ message:"Bad request, no record to delete" }) //inform the user that no records were deleted as no records matched the search criteria 
    }


    res.send(data); //if something was deleted, we can inform the user that the operation was a success 

  }).catch(err => {//if there was a error it will be caught by this function
    res.status(400).send({//sends an error of type 400 to the client with a message about the issue 
      message:"Bad request, couldnt delete it"
    })
  })
}



exports.findOne = (req, res) => //finds one user record by the users id
{
  UserModel.findOne( req.params.id )//using the UserModel we call the .findbyID function, this retreives a record by the primary key of the document
  .then(data => //once a record has been found, then we will execute this block
    {
      res.send(data) //returns the data to the requesting client
    }).catch(err =>{
      res.status(500).send({message:"no user found"}) //there was an error in the findbyid function, and so it is returned to the user. 
    })
}


exports.findOneName = (req, res) => //find one record by the users name 
{
  UserModel.findOne({ Name: req.params.Name })//using the UserModel we call the .findOne function, this retreives a record by the provided search criteria. 
  .then(data =>//once a record has been found, then we will execute this block
    {
      res.send(data)//returns the data to the requesting client
    }).catch(err =>{
      res.status(500).send({message:"no user found"})//there was an error in the findOne function, and so the error is returned to the user. 
    })
}
